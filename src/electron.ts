import { app, BrowserWindow, ipcMain } from 'electron';
import { openDb } from './components/Database';
import { Database } from 'sqlite';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Create or open the SQLite database
let db: Database;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 720,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();
};

app.on('ready', async () => {
  db = await openDb();
  createWindow();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Send a list of invoices to the renderer process
ipcMain.handle('get-invoices', async () => {
  return await db.all("SELECT * FROM Invoices");
});

// Insert a new invoice
ipcMain.handle('create-invoice', async (event, invoice: { customerID: number, invoiceDate: string, dueDate: string, totalAmount: number, status: string }) => {
  const { customerID, invoiceDate, dueDate, totalAmount, status } = invoice;
  const result = await db.run(
    "INSERT INTO Invoices (CustomerID, InvoiceDate, DueDate, TotalAmount, Status) VALUES (?, ?, ?, ?, ?)",
    [customerID, invoiceDate, dueDate, totalAmount, status]
  );
  return { InvoiceID: result.lastID };
});

// Insert a new contact
ipcMain.handle('create-contact', async (event, contact: { firstName: string, lastName: string, email: string, phone: string, address: string, city: string, state: string, zipCode: string }) => {
  const { firstName, lastName, email, phone, address, city, state, zipCode } = contact;
  const result = await db.run(
    "INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    [firstName, lastName, email, phone, address, city, state, zipCode]
  );
  return { CustomerID: result.lastID };
});

// Get all contacts
ipcMain.handle('get-contacts', async () => {
  return await db.all("SELECT * FROM Customers");
});